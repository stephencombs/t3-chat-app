// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  groups          Group[]
  sentInvites     GroupInvite[] @relation("sentInvites")
  receivedInvites GroupInvite[] @relation("receivedInvites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DirectMessage {
  id       String   @id @default(cuid())
  sender   String
  receiver String
  files    String?
  text     String
  sentAt   DateTime @default(now())
}

model GroupMessage {
  id      String   @id @default(cuid())
  sender  String
  text    String
  files   String?
  sentAt  DateTime @default(now())
  group   Group    @relation(fields: [groupId], references: [id])
  groupId String

  @@index([groupId])
}

model Group {
  id          String         @id @default(cuid())
  name        String
  description String
  createdDate DateTime       @default(now())
  users       User[]
  messages    GroupMessage[]
  GroupInvite GroupInvite[]
}

model GroupInvite {
  id         String @id @default(cuid())
  sender     User   @relation("sentInvites", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("receivedInvites", fields: [receiverId], references: [id])
  receiverId String
  group      Group  @relation(fields: [groupId], references: [id])
  groupId    String

  @@index([senderId])
  @@index([receiverId])
  @@index([groupId])
}
